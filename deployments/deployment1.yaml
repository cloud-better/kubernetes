---
kind: Deployment
apiVersion: apps/v1

# Declare the Deployment Name
metadata:
  name: dep-name-ssl-website
  labels:

# Declare the Pod behaviour interms of Replicas needed
# Replicas are the DESIRED STATE of the Pods
# Kubernetes CONTROLLER always maintains the desired number of Pods
# Say we wanted 5 REPLICAS, Controlelr always compares CURRENT STATE vs DESIRED STATE
# If 3 PODS sudenly terminate due to failures, CURRENT STATE = 2, DESIRED STATE =5
# CONTROLLER imemdiately Creates 3 more PODS to ensure DESRITED STATE 5 is maintained
# This is "spec1", we also have another "spec" in Container Section
spec:
  replicas: 1
# Currentky we are not using any Pod Re-creation Strategy
  strategy:
# How does Kube CONTROLLER identify the PODs belonging to this Deployment Object?
# By using a FIELD called SELECTOR
# Below in the TEMPLATE SECTION we define the POD LABEL
# Here in the SELCTOR SECTION, declare the SAME POD LABEL
# CONTROLLER reads this "spec.selector.matchLabels" field
# CONTROLLER will maintain DESIRED STATE of PODs Matching this LABEL
  selector:
    matchLabels:
      pod-name: pod-label-ssl-website
# POD Definition
# Here we are giving 2 LAbels to POD
# pod-name gives a LABEL to POD
# we used "env" to indicate that this POD deployment is Development Type
  template:
    metadata:
      labels:
        pod-name: pod-label-ssl-website
        env: dev
# CONTAINER(s) Definition
# Define a CONTAINER NAME
# Define the IMAGE we want to use
# Here the Image is auto pulled from Docker Hub
# This is "spec2"
    spec:
      containers:
        - name: con-name-ssl-website
          image: tanvisinghny/ssl-website
          ports:
            - containerPort: 80
            - containerPort: 443
